#!/usr/bin/env python3

from PIL import Image
import argparse
import math
import sys
import re
import subprocess


def git_output_as_list(command: list[str]):
    return subprocess.check_output(command).decode().split('\n')[:-1]


if __name__ == "__main__":
    LOG_RGB = "log-rgb"
    LOG_RGBA = "log-rgba"
    AUTHOR_COLOR = "author-.*"
    type_choices = [
      LOG_RGB,
      LOG_RGBA,
      AUTHOR_COLOR,
    ]

    optionParser = argparse.ArgumentParser()
    optionParser.add_argument("-r", "--revision",
        help="""Commitish to use""",
        default="HEAD")
    optionParser.add_argument("-o", "--output",
        help="""Output base filename""",
        default="rainbow")
    optionParser.add_argument("-s", "--scale",
        help="""Scale factor of the output""",
        type=float,
        default=1)
    optionParser.add_argument("-t", "--type",
        help="""Output type ({})""".format(", ".join(type_choices)),
        default="log-rgb")
    args = optionParser.parse_args()

    if re.match(AUTHOR_COLOR, args.type):
        author_filter = "-".join(args.type.split("-")[1:])
        authors = git_output_as_list(["git", "log", "--reverse", "--format=%aN", args.revision])
        pixels = [(0, 0, 0, 255) if author_filter in author else (255, 255, 255, 255) for author in authors]
    elif args.type in [LOG_RGB, LOG_RGBA]:
        hashes = git_output_as_list(["git", "log", "--reverse", "--format=%H", args.revision])
        pixelsHex = [h[start:start+8] for h in hashes for start in range(5)]
        pixels = [(int(h[0:2], 16), int(h[2:4], 16), int(h[4:6], 16), int(h[6:8], 16) if args.type == LOG_RGBA else 255)
                  for h in pixelsHex]
    else:
        print("Invalid type {}".format(args.type))
        sys.exit(1)

    pixelCount = len(pixels)
    root = int(math.sqrt(pixelCount))
    size = (root, root)
    if size[0] * size[1] < pixelCount:
        size = (root + 1, root)
        if size[0] * size[1] < pixelCount:
            size = (root + 1, root + 1)

    img = Image.new("RGBA", size)
    img.putdata(pixels)
    img = img.resize(size=(int(size[0] * args.scale), int(size[1] * args.scale)), resample=Image.Resampling.NEAREST)
    img.save("{}.png".format(args.output))
